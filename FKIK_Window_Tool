import maya.cmds as cmds
import FKIK_Tools as jt

class FKIK_Window:
    
    def __init__(self):
        self.boneList = []
        self.sizeVar = 0
        
        def return_selection(txtField):
            boneList = jt.store_skeletal_selection()
            self.boneList = boneList
            cmds.textField(txtField, edit = True, text = str(boneList))
                
        def call_fk(theBones, theSize):
            jt.make_fk_ctrl(theBones, theSize)
            
        def call_ik(boneSel, sizeSel):
            jt.make_ik_ctrl(boneSel, sizeSel)
            
        def update_sizeVar(_):
            self.sizeVar = cmds.intField(self.controllerInt, query = True, value = True)
                
        def test_return(testReturn):
            print(testReturn)
        
        
        self.win = cmds.window(title='FKIK Creator', widthHeight =(342, 75), 
        maximizeButton = False, resizeToFitChildren = True, sizeable = False)
        mainRule = cmds.columnLayout(adjustableColumn = True)

        
        cmds.rowLayout(numberOfColumns = 4, adjustableColumn = 1)
        self.boneListTextField = cmds.textField(editable = False, width = 250)
        cmds.button(label = 'Select Bones', command = lambda x: 
                    return_selection(self.boneListTextField))
        cmds.text(label = 'Controller Size:  ')
        self.controllerInt = cmds.intField(changeCommand = update_sizeVar)
        
        cmds.setParent(mainRule)
        cmds.rowLayout(numberOfColumns = 2)
        cmds.button(label = 'Create FK Chain From Selection', command = lambda x: 
                    call_fk(self.boneList, self.sizeVar))
        cmds.button(label = 'Create IK Chain From Selection', command = lambda x:
                    call_ik(self.boneList, self.sizeVar))
        
        cmds.setParent(mainRule)
        cmds.button(label = 'Print Controller Size', command = lambda x: test_return(self.sizeVar))
        
        cmds.showWindow(self.win)
        

    
        
    

        
FKIK_Window()
